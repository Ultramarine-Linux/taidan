use tokio::io::{AsyncSeekExt, AsyncWriteExt};

use super::super::i18n;
use crate::awrite;
use crate::prelude::*;

#[derive(Clone, Copy, Debug, Default)]
pub struct SetupImf;
impl super::Step for SetupImf {
    #[tracing::instrument]
    async fn run(
        &self,
        settings: &crate::backend::settings::Settings,
        sender: relm4::Sender<crate::pages::InstallingPageMsg>,
    ) -> color_eyre::Result<()> {
        if settings.ims.is_empty() {
            return Ok(());
        }
        if let Err(e) = match &*CFG.edition {
            "plasma" | "kde" => write_fcitx5_profile(settings).await,
            _ => write_ibus_profile(settings).await,
        } {
            tracing::warn!(?e, "cannot setup IMFs");
        }
        Ok(())
    }
}

// kwinrc config for selecting fcitx5 as the virtual input
const KWINRC_FCITX5: &[u8] = b"
[Wayland]
InputMethod[$e]=/usr/share/applications/fcitx5-wayland-launcher.desktop
VirtualKeyboardEnabled=true
";

async fn write_fcitx5_profile(
    crate::backend::settings::Settings {
        username,
        ims,
        kb_layout,
        kb_variant,
        ..
    }: &crate::backend::settings::Settings,
) -> color_eyre::Result<()> {
    // TODO: should we put these in /etc/skel/ instead? Problem: user has already been created
    // before this stepâ€¦
    let default_group_name = t!("default");
    tokio::fs::create_dir_all(format!("/home/{username}/.config/fcitx5/"))
        .await
        .wrap_err("cannot create ~/.config/fcitx5/")?;
    let profile_path = format!("/home/{username}/.config/fcitx5/profile");
    let mut openopts = tokio::fs::OpenOptions::new();
    openopts.write(true).truncate(false);
    let mut profile = openopts
        .open(&profile_path)
        .await
        .wrap_err("cannot make/open ~/.config/fcitx5/profile")?;
    profile.seek(std::io::SeekFrom::End(0)).await?;

    awrite!(profile <-
        "\
            [Groups/0]\n\
            # Group Name\n\
            Name={default_group_name}\n\
            # Layout\n\
            Default Layout={kb_layout}{var}\n\
            # Default Input Method\n\
            DefaultIM=keyboard-{kb_layout}{var}\n\n\
        ",
        var=&kb_variant.as_ref().map(|variant| format!("-{variant}")).unwrap_or_default(),
    )?;

    for (i, &im) in ims.iter().enumerate() {
        awrite!(profile <-
            "\
                [Groups/0/Items/{i}]\n\
                # Name\n\
                Name={}\n\
                # Layout\n\
                Layout=\n\n\
            ",
            i18n::str_to_im(im).fcitx5_ref.unwrap()
        )?;
    }

    awrite!(profile <- "[GroupOrder]\n0={default_group_name}\n")?;

    drop(profile);

    // https://invent.kde.org/plasma/kwin/-/blob/master/src/kcms/virtualkeyboard/virtualkeyboardsettings.kcfg?ref_type=heads
    let kwinrc_path = format!("/home/{username}/.config/kwinrc");
    let mut kwinrc = openopts
        .open(&kwinrc_path)
        .await
        .wrap_err("cannot make/open ~/.config/kwinrc")?;
    kwinrc.seek(std::io::SeekFrom::End(0)).await?;
    kwinrc.write_all(KWINRC_FCITX5).await?;
    drop(kwinrc);

    let user = uzers::get_user_by_name(username).expect("can't find user");
    chown(&profile_path, &user)?;
    chown(&kwinrc_path, &user)?;

    Ok(())
}

fn chown(path: &str, user: &uzers::User) -> Result<(), color_eyre::eyre::Error> {
    std::os::unix::fs::chown(path, Some(user.uid()), Some(user.primary_group_id()))
        .wrap_err("cannot chown file")
        .with_note(|| format!("Path: {path}"))?;
    Ok(())
}

async fn write_ibus_profile(
    crate::backend::settings::Settings { ims, .. }: &crate::backend::settings::Settings,
) -> color_eyre::Result<()> {
    let engines = ims
        .iter()
        .map(|s| format!("'{}'", i18n::str_to_im(s).ibus_ref.unwrap()))
        .join(", ");

    let mut f = tokio::fs::File::create("/etc/dconf/db/ibus.d/20-taidan-oobe")
        .await
        .wrap_err("cannot make/open /etc/dconf/db/ibus.d/20-taidan-oobe")?;

    awrite!(f <- "\
        # This file is generated by Taidan.\n\
        #\n\
        # The followings are IMEs and IMs selected by the user during OOBE.\n\
        #\n\
        # You may change this file, but you probably should create a new file with a number higher than 20.\n\
        # Remember to run `dconf update` after any changes.\n\
        #\n\n")?;

    awrite!(f <- "\
        [desktop/ibus/general]\n\
        use-system-keyboard-layout=true\n\
        engines-order=[{engines}]\n\
        preload-engines[{engines}]\n")?;

    Ok(())
}
