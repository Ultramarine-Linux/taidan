use super::super::i18n;
use super::root;
use crate::prelude::*;

#[derive(Clone, Copy, Debug, Default)]
pub struct SetupImf;
impl super::Step for SetupImf {
    #[tracing::instrument]
    async fn run(
        &self,
        settings: &crate::backend::settings::Settings,
        sender: relm4::Sender<crate::pages::InstallingPageMsg>,
    ) -> color_eyre::Result<()> {
        if settings.ims.is_empty() || settings.nointernet {
            return Ok(());
        }
        if let Err(e) = match &*CFG.edition {
            "plasma" | "kde" => write_fcitx5_profile(settings).await,
            _ => write_ibus_profile(settings).await,
        } {
            tracing::warn!(?e, "cannot setup IMFs");
        }
        Ok(())
    }
}

// kwinrc config for selecting fcitx5 as the virtual input
const KWINRC_FCITX5: &[u8] = b"
[Wayland]
InputMethod[$e]=/usr/share/applications/fcitx5-wayland-launcher.desktop
VirtualKeyboardEnabled=true
";

async fn write_fcitx5_profile(
    crate::backend::settings::Settings {
        username,
        ims,
        kb_layout,
        kb_variant,
        ..
    }: &crate::backend::settings::Settings,
) -> color_eyre::Result<()> {
    // TODO: should we put these in /etc/skel/ instead? Problem: user has already been created
    // before this stepâ€¦
    let default_group_name = t!("default");
    async_fs::create_dir_all(format!("/home/{username}/.config/fcitx5/"))
        .await
        .wrap_err("cannot create ~/.config/fcitx5/")?;
    root(
        "mkdir",
        &["-p", &format!("/home/{username}/.config/fcitx5/")],
    )
    .await?;
    let profile_path = format!("/home/{username}/.config/fcitx5/profile");
    let mut p = async_process::Command::new("pkexec")
        .args(["--user", "root", "tee"])
        .args(["-a", &profile_path])
        .stdin(std::process::Stdio::piped())
        .stderr(std::process::Stdio::piped())
        .spawn()
        .wrap_err("failed to spawn pkexec")?;
    let mut buf = vec![];
    buf.extend_from_slice(
        format!(
            "\
            [Groups/0]\n\
            # Group Name\n\
            Name={default_group_name}\n\
            # Layout\n\
            Default Layout={kb_layout}{var}\n\
            # Default Input Method\n\
            DefaultIM=keyboard-{kb_layout}{var}\n\n\
        ",
            var = &kb_variant
                .as_ref()
                .map(|variant| format!("-{variant}"))
                .unwrap_or_default(),
        )
        .as_bytes(),
    );

    for (i, &im) in ims.iter().enumerate() {
        buf.extend_from_slice(
            format!(
                "\
                [Groups/0/Items/{i}]\n\
                # Name\n\
                Name={}\n\
                # Layout\n\
                Layout=\n\n\
            ",
                i18n::str_to_im(im).fcitx5_ref.unwrap()
            )
            .as_bytes(),
        );
    }

    buf.extend_from_slice(format!("[GroupOrder]\n0={default_group_name}\n").as_bytes());

    p.stdin.as_mut().unwrap().write_all(&buf).await?;
    p.stdin.take().unwrap(); // drop the stream

    let p = p.output().await?;

    if !p.status.success() {
        return Err(eyre!("failed to write to ~/.config/fcitx5/profile")
            .note(String::from_utf8_lossy(&p.stderr).to_string()));
    }

    // https://invent.kde.org/plasma/kwin/-/blob/master/src/kcms/virtualkeyboard/virtualkeyboardsettings.kcfg?ref_type=heads
    let kwinrc_path = format!("/home/{username}/.config/kwinrc");
    let mut p = async_process::Command::new("pkexec")
        .args(["--user", "root", "tee"])
        .args(["-a", &kwinrc_path])
        .stdin(std::process::Stdio::piped())
        .stderr(std::process::Stdio::piped())
        .spawn()
        .wrap_err("failed to spawn pkexec")?;
    p.stdin.as_mut().unwrap().write_all(KWINRC_FCITX5).await?;
    p.stdin.take().unwrap(); // drop the stream

    let p = p.output().await?;

    if !p.status.success() {
        return Err(eyre!("failed to write to ~/.config/kwinrc")
            .note(String::from_utf8_lossy(&p.stderr).to_string()));
    }

    root("chown", &[username, &profile_path, &kwinrc_path]).await?;

    Ok(())
}

async fn write_ibus_profile(
    crate::backend::settings::Settings { ims, .. }: &crate::backend::settings::Settings,
) -> color_eyre::Result<()> {
    let engines = ims
        .iter()
        .map(|s| format!("'{}'", i18n::str_to_im(s).ibus_ref.unwrap()))
        .join(", ");

    let buf = format!("\
        # This file is generated by Taidan.\n\
        #\n\
        # The followings are IMEs and IMs selected by the user during OOBE.\n\
        #\n\
        # You may change this file, but you probably should create a new file with a number higher than 20.\n\
        # Remember to run `dconf update` after any changes.\n\
        #\n\n\
        [desktop/ibus/general]\n\
        use-system-keyboard-layout=true\n\
        engines-order=[{engines}]\n\
        preload-engines[{engines}]\n");

    let mut p = async_process::Command::new("pkexec")
        .args(["--user", "root", "tee"])
        .args(["-a", "/etc/dconf/db/ibus.d/20-taidan-oobe"])
        .stdin(std::process::Stdio::piped())
        .stderr(std::process::Stdio::piped())
        .spawn()
        .wrap_err("failed to spawn pkexec")?;

    p.stdin.as_mut().unwrap().write_all(buf.as_bytes()).await?;
    p.stdin.take().unwrap(); // drop the stream

    let p = p.output().await?;

    if !p.status.success() {
        return Err(eyre!("failed to write to ~/.config/kwinrc")
            .note(String::from_utf8_lossy(&p.stderr).to_string()));
    }

    Ok(())
}
