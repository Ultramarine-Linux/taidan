[workspace]

members = ["taidan_proc_macros", "taidan_catalogue_parser"]

[package]
name = "taidan"
version = "0.1.31"
edition = "2021"
description = "Out-Of-Box-Experience (OOBE) and Welcome App"
license = "GPL-2.0-or-later"
repository = "https://github.com/Ultramarine-Linux/taidan"
readme = "README.md"
keywords = ["oobe", "ultramarine", "linux"]

[dependencies]
basic-toml = "0.1.10"
color-eyre = "0.6.5"
const_format = "0.2.34"
enum_dispatch = "0.3.13"
futures = "0.3.31"
i18n-embed = { version = "0.16.0", features = [
    "desktop-requester",
    "filesystem-assets",
    "fluent-system",
] }
i18n-embed-fl = "0.10.0"
iso3166 = "1.2.1"
isolang = { version = "2.4.0", features = ["local_names"] }
itertools = "0.14.0"
kurage = { version = "0.1.4" }
libc = "0.2.174"
# libappstream = "0.3.0"
libhelium = "0.12.0"
memchr = "2.7.5"
parking_lot = "0.12.4"
paste = "1.0.15"
phf = { version = "0.13.1", features = ["macros"] }
poly_l10n = "0.0.7"
regex = "1.11.1"
relm4 = { version = "0.9.1", default-features = false, features = ["macros"] }
reqwest = { version = "0.12.22", features = [
    "http2",
    "default-tls",
], default-features = false }
rust-embed = { version = "8.7.2", features = ["include-exclude"] }
serde = "1.0.219"
serde_json = "1.0.140"
strip-ansi-escapes = "0.2.1"
taidan_catalogue_parser = { path = "taidan_catalogue_parser" }
taidan_proc_macros = { path = "taidan_proc_macros" }
tempfile = { version = "3.20.0", default-features = false }
tokio = { version = "1.46.1", features = [
    "fs",
    "io-util",
    "macros",
    "process",
] }
tracing = "0.1.41"
tracing-appender = "0.2.3"
tracing-error = "0.2.1"
tracing-journald = "0.3.1"
tracing-subscriber = { version = "0.3.20", features = [
    "env-filter",
    "tracing-log",
] }
uzers = "0.12.1"
xcrypt = "0.3.1"

[build-dependencies]
glib-build-tools = "0.21.0"

[lints.clippy]
# cargo = { level = "warn", priority = -1 }
complexity = { level = "warn", priority = -1 }
nursery = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }
suspicious = { level = "warn", priority = -1 }

disallowed-macros = "deny"
excessive-nesting = "warn"

# arithmetic_side_effects = "warn"
assertions_on_result_states = "warn"
clone_on_ref_ptr = "warn"
create_dir = "warn"
empty_enum_variants_with_brackets = "warn"
empty_structs_with_brackets = "warn"
field_scoped_visibility_modifiers = "deny"
format_push_string = "warn"
get_unwrap = "warn"
if_then_some_else_none = "warn"
impl_trait_in_params = "warn"
# indexing_slicing = "warn"
infinite_loop = "deny"
let_underscore_must_use = "deny"
let_underscore_untyped = "warn"
# multiple_inherent_impl = "warn"
needless_raw_strings = "warn"
rc_buffer = "warn"
rc_mutex = "deny"
redundant_type_annotations = "warn"
renamed_function_params = "warn"
rest_pat_in_fully_bound_structs = "warn"
semicolon_outside_block = "warn"
str_to_string = "warn"
string_lit_chars_any = "warn"
string_to_string = "warn"
tests_outside_test_module = "warn"
todo = "warn"
try_err = "warn"
undocumented_unsafe_blocks = "deny"
unimplemented = "warn"
unneeded_field_pattern = "warn"
unwrap_in_result = "warn"
needless_for_each = "allow"
